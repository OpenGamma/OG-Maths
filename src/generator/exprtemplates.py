#
# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
#
# Please see distribution for license.
#

# Expressions header

expression_hh = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#ifndef _EXPRESSION_HH
#define _EXPRESSION_HH

// bindings
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <memory>

#include "expressionbase.hh"
#include "numeric.hh"
#include "visitor.hh"
#include "exceptions.hh"

using namespace std;


/**
 * The namespace for the DAG library
 */
namespace librdag
{

%(expression_classes)s

} // namespace librdag

#endif
"""

expr_class = """\
class %(classname)s: public %(parentclass)s
{
  public:
%(constructor)s
    virtual pOGNumeric copy() const override;
    virtual p%(classname)s as%(classname)s() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};
"""

unary_constructor = """\
    %(classname)s(pOGNumeric arg);"""

binary_constructor = """\
    %(classname)s(pOGNumeric arg0, pOGNumeric arg1);"""

# Expressions cc

expression_cc = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#include <iostream>
#include "expression.hh"
#include "terminal.hh"
#include "exceptions.hh"
#include "exprtypeenum.h"

using namespace std;

namespace librdag
{

%(expression_methods)s

} // namespace librdag
"""

expr_methods = """\
/**
 * %(classname)s node
 */

%(ctor_method)s

pOGNumeric
%(classname)s::copy() const
{
%(copy_method)s
}

p%(classname)s
%(classname)s::as%(classname)s() const
{
  return static_pointer_cast<const %(classname)s, const OGNumeric>(shared_from_this());
}

void
%(classname)s::debug_print() const
{
        cout << "%(classname)s class" << endl;
}

ExprType_t
%(classname)s::getType() const
{
  return %(classname)s_ENUM;
}

"""

unary_ctor_method = """\
%(classname)s::%(classname)s(pOGNumeric arg): OGUnaryExpr{arg} {}"""

binary_ctor_method = """\
%(classname)s::%(classname)s(pOGNumeric arg1, pOGNumeric arg2): OGBinaryExpr{arg1, arg2} {}"""

unary_copy_method = """\
  return pOGNumeric{new %(classname)s(_args[0]->copy())};"""

binary_copy_method = """\
  return pOGNumeric{new %(classname)s(_args[0]->copy(), _args[1]->copy())};"""

# Numeric header file

numeric_hh = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#ifndef _NUMERIC_HH
#define _NUMERIC_HH

#include <memory>
#include "uncopyable.hh"
#include "exprtypeenum.h"

namespace librdag {

// fwd decl
class OGNumeric;
typedef std::shared_ptr<const OGNumeric> pOGNumeric;
class OGTerminal;
typedef std::shared_ptr<const OGTerminal> pOGTerminal;
class OGExpr;
typedef std::shared_ptr<const OGExpr> pOGExpr;
class OGRealScalar;
typedef std::shared_ptr<const OGRealScalar> pOGRealScalar;
class OGComplexScalar;
typedef std::shared_ptr<const OGComplexScalar> pOGComplexScalar;
class OGIntegerScalar;
typedef std::shared_ptr<const OGIntegerScalar> pOGIntegerScalar;
class OGRealMatrix;
typedef std::shared_ptr<const OGRealMatrix> pOGRealMatrix;
class OGComplexMatrix;
typedef std::shared_ptr<const OGComplexMatrix> pOGComplexMatrix;
class OGLogicalMatrix;
typedef std::shared_ptr<const OGLogicalMatrix> pOGLogicalMatrix;
class OGRealDiagonalMatrix;
typedef std::shared_ptr<const OGRealDiagonalMatrix> pOGRealDiagonalMatrix;
class OGComplexDiagonalMatrix;
typedef std::shared_ptr<const OGComplexDiagonalMatrix> pOGComplexDiagonalMatrix;
class OGRealSparseMatrix;
typedef std::shared_ptr<const OGRealSparseMatrix> pOGRealSparseMatrix;
class OGComplexSparseMatrix;
typedef std::shared_ptr<const OGComplexSparseMatrix> pOGComplexSparseMatrix;
class COPY;
typedef std::shared_ptr<const COPY> pCOPY;
class SELECTRESULT;
typedef std::shared_ptr<const SELECTRESULT> pSELECTRESULT;
class NORM2;
typedef std::shared_ptr<const NORM2> pNORM2;
class PINV;
typedef std::shared_ptr<const PINV> pPINV;
class INV;
typedef std::shared_ptr<const INV> pINV;
class TRANSPOSE;
typedef std::shared_ptr<const TRANSPOSE> pTRANSPOSE;
class CTRANSPOSE;
typedef std::shared_ptr<const CTRANSPOSE> pCTRANSPOSE;
class SVD;
typedef std::shared_ptr<const SVD> pSVD;
class MTIMES;
typedef std::shared_ptr<const MTIMES> pMTIMES;
class LU;
typedef std::shared_ptr<const LU> pLU;

class ConvertTo;
class Visitor;

%(fwd_decls)s

/*
 * Base class for absolutely everything!
 */
class OGNumeric: private Uncopyable, public std::enable_shared_from_this<OGNumeric>
{
  public:
    virtual ~OGNumeric();
    virtual void debug_print() const = 0;
    virtual void accept(Visitor &v) const = 0;
    virtual pOGNumeric copy() const = 0;
    virtual pOGExpr asOGExpr() const;
    virtual pCOPY asCOPY() const;
    virtual pSELECTRESULT asSELECTRESULT() const;
    virtual pNORM2 asNORM2() const;
    virtual pPINV asPINV() const;
    virtual pINV asINV() const;
    virtual pTRANSPOSE asTRANSPOSE() const;
    virtual pCTRANSPOSE asCTRANSPOSE() const;
    virtual pSVD asSVD() const;
    virtual pMTIMES asMTIMES() const;
    virtual pLU asLU() const;
%(cast_methods)s
    virtual pOGTerminal asOGTerminal() const;
    virtual pOGRealScalar asOGRealScalar() const;
    virtual pOGComplexScalar asOGComplexScalar() const;
    virtual pOGIntegerScalar asOGIntegerScalar() const;
    virtual pOGRealMatrix asOGRealMatrix() const;
    virtual pOGComplexMatrix asOGComplexMatrix() const;
    virtual pOGLogicalMatrix asOGLogicalMatrix() const;
    virtual pOGRealDiagonalMatrix asOGRealDiagonalMatrix() const;
    virtual pOGComplexDiagonalMatrix asOGComplexDiagonalMatrix() const;
    virtual pOGRealSparseMatrix asOGRealSparseMatrix() const;
    virtual pOGComplexSparseMatrix asOGComplexSparseMatrix() const;
    virtual ExprType_t getType() const;
};

}
#endif // _NUMERIC_HH
"""

numeric_fwd_decl = """\
class %(classname)s;
typedef std::shared_ptr<const %(classname)s> p%(classname)s;

"""

numeric_cast_method =  """\
    virtual p%(classname)s as%(classname)s() const;
"""

# Numeric cc file

numeric_cc = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#include <iostream>
#include "numeric.hh"
#include "expression.hh"
#include "terminal.hh"

using namespace std;

namespace librdag
{

/*
 * Autogenerated OGNumeric methods
 */

%(numeric_methods)s

} // namespace librdag
"""

numeric_method = """\
p%(classname)s
OGNumeric::as%(classname)s() const
{
  return p%(classname)s{};
}
"""
