#
# Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
#
# Please see distribution for license.
#

# Expressions header

expression_hh = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#ifndef _EXPRESSION_HH
#define _EXPRESSION_HH

// bindings
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <memory>

#include "expressionbase.hh"
#include "numeric.hh"
#include "visitor.hh"
#include "exceptions.hh"

/**
 * The namespace for the DAG library
 */
namespace librdag
{

%(expression_classes)s

} // namespace librdag

#endif
"""

expr_class = """\
class %(classname)s: public %(parentclass)s
{
  public:
    typedef std::shared_ptr<const %(classname)s> Ptr;
%(factory)s
    virtual OGNumeric::Ptr copy() const override;
    virtual %(classname)s::Ptr as%(classname)s() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
  private:
%(constructor)s
};
"""

unary_constructor = """\
    %(classname)s(const OGNumeric::Ptr& arg);"""

binary_constructor = """\
    %(classname)s(const OGNumeric::Ptr& arg0, const OGNumeric::Ptr& arg1);"""

unary_factory = """\
    static %(classname)s::Ptr create(const OGNumeric::Ptr& arg);
""" 

binary_factory = """\
    static %(classname)s::Ptr create(const OGNumeric::Ptr& arg0, const OGNumeric::Ptr& arg1);
"""

# Expressions cc

expression_cc = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#include <iostream>
#include "expression.hh"
#include "terminal.hh"
#include "exceptions.hh"
#include "exprtypeenum.h"

using namespace std;

namespace librdag
{

%(expression_methods)s

} // namespace librdag
"""

expr_methods = """\
/**
 * %(classname)s node
 */

%(ctor_method)s

%(factory_method)s

OGNumeric::Ptr
%(classname)s::copy() const
{
%(copy_method)s
}

%(classname)s::Ptr
%(classname)s::as%(classname)s() const
{
  return static_pointer_cast<const %(classname)s, const OGNumeric>(shared_from_this());
}

void
%(classname)s::debug_print() const
{
        cout << "%(classname)s class" << endl;
}

ExprType_t
%(classname)s::getType() const
{
  return %(classname)s_ENUM;
}

"""

unary_ctor_method = """\
%(classname)s::%(classname)s(const OGNumeric::Ptr& arg): OGUnaryExpr{arg} {}"""

binary_ctor_method = """\
%(classname)s::%(classname)s(const OGNumeric::Ptr& arg1, const OGNumeric::Ptr& arg2): OGBinaryExpr{arg1, arg2} {}"""

unary_factory_method = """\
%(classname)s::Ptr
%(classname)s::create(const OGNumeric::Ptr& arg)
{
  return %(classname)s::Ptr{new %(classname)s{arg}};
}"""

binary_factory_method = """\
%(classname)s::Ptr
%(classname)s::create(const OGNumeric::Ptr& arg0, const OGNumeric::Ptr& arg1)
{
  return %(classname)s::Ptr{new %(classname)s{arg0, arg1}};
}"""
unary_copy_method = """\
  return OGNumeric::Ptr{new %(classname)s(_args[0]->copy())};"""

binary_copy_method = """\
  return OGNumeric::Ptr{new %(classname)s(_args[0]->copy(), _args[1]->copy())};"""

# Numeric header file

numeric_hh = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#ifndef _NUMERIC_HH
#define _NUMERIC_HH

#include <memory>
#include "uncopyable.hh"
#include "exprtypeenum.h"

namespace librdag {

// fwd decl
class OGNumeric;
class OGTerminal;
class OGExpr;
class OGRealScalar;
class OGComplexScalar;
class OGIntegerScalar;
class OGRealDenseMatrix;
class OGComplexDenseMatrix;
class OGLogicalMatrix;
class OGRealDiagonalMatrix;
class OGComplexDiagonalMatrix;
class OGRealSparseMatrix;
class OGComplexSparseMatrix;
class COPY;
class SELECTRESULT;
class NORM2;
class PINV;
class INV;
class TRANSPOSE;
class CTRANSPOSE;
class SVD;
class MTIMES;
class LU;

class ConvertTo;
class Visitor;

%(fwd_decls)s

/*
 * Base class for absolutely everything!
 */
class OGNumeric: private Uncopyable, public std::enable_shared_from_this<OGNumeric>
{
  public:
    typedef std::shared_ptr<const OGNumeric> Ptr;
    virtual ~OGNumeric();
    virtual void debug_print() const = 0;
    virtual void accept(Visitor &v) const = 0;
    virtual OGNumeric::Ptr copy() const = 0;
    virtual std::shared_ptr<const OGExpr> asOGExpr() const;
    virtual std::shared_ptr<const COPY> asCOPY() const;
    virtual std::shared_ptr<const SELECTRESULT> asSELECTRESULT() const;
    virtual std::shared_ptr<const NORM2> asNORM2() const;
    virtual std::shared_ptr<const PINV> asPINV() const;
    virtual std::shared_ptr<const INV> asINV() const;
    virtual std::shared_ptr<const TRANSPOSE> asTRANSPOSE() const;
    virtual std::shared_ptr<const CTRANSPOSE> asCTRANSPOSE() const;
    virtual std::shared_ptr<const SVD> asSVD() const;
    virtual std::shared_ptr<const MTIMES> asMTIMES() const;
    virtual std::shared_ptr<const LU> asLU() const;
%(cast_methods)s
    virtual std::shared_ptr<const OGTerminal> asOGTerminal() const;
    virtual std::shared_ptr<const OGRealScalar> asOGRealScalar() const;
    virtual std::shared_ptr<const OGComplexScalar> asOGComplexScalar() const;
    virtual std::shared_ptr<const OGIntegerScalar> asOGIntegerScalar() const;
    virtual std::shared_ptr<const OGRealDenseMatrix> asOGRealDenseMatrix() const;
    virtual std::shared_ptr<const OGComplexDenseMatrix> asOGComplexDenseMatrix() const;
    virtual std::shared_ptr<const OGLogicalMatrix> asOGLogicalMatrix() const;
    virtual std::shared_ptr<const OGRealDiagonalMatrix> asOGRealDiagonalMatrix() const;
    virtual std::shared_ptr<const OGComplexDiagonalMatrix> asOGComplexDiagonalMatrix() const;
    virtual std::shared_ptr<const OGRealSparseMatrix> asOGRealSparseMatrix() const;
    virtual std::shared_ptr<const OGComplexSparseMatrix> asOGComplexSparseMatrix() const;
    virtual ExprType_t getType() const;
};

}
#endif // _NUMERIC_HH
"""

numeric_fwd_decl = """\
class %(classname)s;
"""

numeric_cast_method =  """\
    virtual std::shared_ptr<const %(classname)s> as%(classname)s() const;
"""

# Numeric cc file

numeric_cc = """\
/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 *
 * This file is autogenerated during the DOGMA2 build process - src/generator/generator.py
 */

#include <iostream>
#include "numeric.hh"
#include "expression.hh"
#include "terminal.hh"

using namespace std;

namespace librdag
{

/*
 * Autogenerated OGNumeric methods
 */

%(numeric_methods)s

} // namespace librdag
"""

numeric_method = """\
%(classname)s::Ptr
OGNumeric::as%(classname)s() const
{
  return %(classname)s::Ptr{};
}
"""
