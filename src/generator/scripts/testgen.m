%
% Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
%
% Please see distribution for license.
%

clear all; close all; clc;

% scalar
data.rs1.val = 7;                   % real scalar
data.rs1.str = 'real scalar';
data.cs1.val = 5+11i;               % complex scalar
data.cs1.str = 'complex scalar';

% vectors
data.rcv4.val = [1:4]';              % real col vector
data.rcv4.str = 'real length 4 column vector';
data.rcv5.val = [1:5]';              % real col vector
data.rcv5.str = 'real length 5 column vector';
data.rrv4.val = [4:-1:1];            % real row vector
data.rrv4.str = 'real length 4 row vector';
data.rrv5.val = [5:-1:1];            % real row vector
data.rrv5.str = 'real length 5 row vector';
data.ccv4.val = [1:4]'+[4:-1:1]'*i;  % complex col vector
data.ccv4.str = 'complex length 4 column vector';
data.ccv5.val = [1:5]'+[5:-1:1]'*i;  % complex col vector
data.ccv5.str = 'complex length 5 column vector';
data.crv4.val = [4:-1:1]+[1:4]*i;    % complex row vector
data.crv4.str = 'complex length 4 row vector';
data.crv5.val = [5:-1:1]+[1:5]*i;    % complex row vector
data.crv5.str = 'complex length 5 row vector';

% matrices
data.r5x4.val = toeplitz(data.rcv5.val,data.rrv4.val);
data.r5x4.str = 'real 5x4 matrix';
data.r4x5.val = toeplitz(data.rcv4.val,data.rrv5.val);
data.r4x5.str = 'real 4x5 matrix';
data.c5x4.val = toeplitz(data.ccv5.val,data.crv4.val);
data.c5x4.str = 'complex 5x4 matrix';
data.c4x5.val = toeplitz(data.ccv4.val,data.crv5.val);
data.c4x5.str = 'complex 4x5 matrix';

% template
bsx_infix_str = "...
/**\\n ...
* Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies\\n ...
*\\n ...
* Please see distribution for license.\\n ...
*/\\n ...
 // NOTE: This code is autogenerated, see src/generator/scripts/testgen.m\n ...
 \\n ...
#include \"gtest/gtest.h\"\\n ...
#include \"terminal.hh\"\\n ...
#include \"execution.hh\"\\n ...
#include \"dispatch.hh\"\\n ...
#include \"testnodes.hh\"\\n ...
\\n ...
using namespace std;\\n ...
using namespace librdag;\\n ...
using namespace testnodes;\\n ...
using ::testing::TestWithParam;\\n ...
using ::testing::Values;\\n ...
\\n ...
  /*\\n ...
   * Check __NODE_NAME__ node behaves\\n ...
   */\\n ...
\\n ...
  BINARY_NODE_TEST_SETUP(__NODE_NAME__)\\n ...
\\n ...
  INSTANTIATE_NODE_TEST_CASE_P(__NODE_NAME__Tests,__NODE_NAME__,\\n ...
    Values\\n ...
    (\\n ...
      __TEST_CASES__\\n ...
    )\\n ...
  ); \\n ...
  \\n";

ops = {'plus','minus','times','rdivide'};
outdir='../../librdag/test/nodes/';
for k=1:length(ops)
  loc_bsx_infix_str = bsx_infix_str;
  infix_tests = gen_bsx_infix_tests(ops{k}, data);
  loc_bsx_infix_str=strrep(loc_bsx_infix_str, '__NODE_NAME__', upper(ops{k}));
  loc_bsx_infix_str=strrep(loc_bsx_infix_str, '__TEST_CASES__', infix_tests);
  fname = ['check_',ops{k},'.cc'];
  fp=fopen([outdir,fname],'w+');
  if(fp<0)
    error(['file open failed for:', fname]);
  end
  fprintf(fp,loc_bsx_infix_str);
  fclose(fp);
end