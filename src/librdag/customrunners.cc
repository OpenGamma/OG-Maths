/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for licence.
 *
 */

#include "dispatch.hh"
#include "customrunners.hh"
#include "expression.hh"
#include "iss.hh"
#include "terminal.hh"
#include "uncopyable.hh"
#include "lapack.hh"

#include <stdio.h>

/**
 * Unit contains code for custom (i.e. non-autogenerated) runners
 */
namespace librdag {

void *
NORM2Runner::run(RegContainer SUPPRESS_UNUSED * reg, OGRealScalar const SUPPRESS_UNUSED * arg) const
{
  const OGRealScalar* ret;
  ret = new OGRealScalar(fabs(arg->getValue()));
  reg->push_back(ret);
  return nullptr;
}
void *
NORM2Runner::run(RegContainer SUPPRESS_UNUSED * reg, OGRealMatrix const SUPPRESS_UNUSED * arg) const
{
  if(arg->getRows()==1 && arg->getCols()==1)
  {
    const OGRealScalar* ret;
    ret = new OGRealScalar(fabs(arg->getData()[0]));
    reg->push_back(ret);
    ret->debug_print();
  }
  else if(isVector(arg))
  {
    const OGRealScalar* ret;
    int one = 1;
    int len = arg->getRows() > arg->getCols() ? arg->getRows(): arg->getCols();
    real16 value = F77FUNC(dnrm2)(&len, arg->getData(), &one);
    ret = new OGRealScalar(value);
    reg->push_back(ret);
  }
  else
  {

  }
  return nullptr;
}
void *
NORM2Runner::run(RegContainer SUPPRESS_UNUSED * reg, OGComplexMatrix const SUPPRESS_UNUSED * arg) const
{
  throw rdag_error("Unimplemented unary expression node");
  return nullptr;
}

} // end namespace