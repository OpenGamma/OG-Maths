/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */


#include "gtest/gtest.h"
#include "terminal.hh"
#include "execution.hh"
#include "dispatch.hh"
#include "testnodes.hh"
#include "equals.hh"
#include "runtree.hh"

using namespace std;
using namespace librdag;
using namespace testnodes;
using ::testing::TestWithParam;
using ::testing::Values;

/*
 * Check QR node behaves correctly
 */

// Raw data
real8 rcondok_3x7[21]={10.e0,5.e0,0.e0,2.e0,-15.e0,4.e0,5.e0,3.e0,3.e0,1.e0,4.e0,-6.e0,6.e0,-2.e0,1.e0,-3.e0,8.e0,2.e0,2.e0,-3.e0,3.e0};
complex16 ccondok_3x7[21]={{10.e0,-20.e0},{5.e0,-10.e0},0.e0,{2.e0,-4.e0},{-15.e0,30.e0},{4.e0,-8.e0},{5.e0,-10.e0},{3.e0,-6.e0},{3.e0,-6.e0},{1.e0,-2.e0},{4.e0,-8.e0},{-6.e0,12.e0},{6.e0,-12.e0},{-2.e0,4.e0},{1.e0,-2.e0},{-3.e0,6.e0},{8.e0,-16.e0},{2.e0,-4.e0},{2.e0,-4.e0},{-3.e0,6.e0},{3.e0,-6.e0}};

/**
 * Holds the data used in an QR decomposition test, pointers are wired only, no ownership is taken.
 */
class QRTestDataHolder
{
  public:
    /**
     * @param input the input matrix
     * @param expectedQ the expected Q matrix
     * @param expectedR the expected R matrix
     */
    QRTestDataHolder(OGTerminal::Ptr input, OGTerminal::Ptr expectedQ, OGTerminal::Ptr expectedR)
    {
      _input = input;
      _expectedQ = expectedQ;
      _expectedR = expectedR;
    }
  OGTerminal::Ptr getInput()
  {
    return _input;
  }
  OGTerminal::Ptr getExpectedQ()
  {
    return _expectedQ;
  }
  OGTerminal::Ptr getExpectedR()
  {
    return _expectedR;
  }
  private:
    OGTerminal::Ptr _input;
    OGTerminal::Ptr _expectedQ;
    OGTerminal::Ptr _expectedR;
};


/**
 * Performs the actual checks on the QR decomposition.
 */
void check_qr(QRTestDataHolder data)
{
  OGTerminal::Ptr input = data.getInput();
  OGTerminal::Ptr expectedQ = data.getExpectedQ();
  OGTerminal::Ptr expectedR = data.getExpectedR();
  OGExpr::Ptr qr = QR::create(input);
  runtree(qr);
  OGTerminal::Ptr Q = OGTerminal::Ptr{qr->getRegs()[0]->asOGTerminal()};
  OGTerminal::Ptr R = OGTerminal::Ptr{qr->getRegs()[1]->asOGTerminal()};

  // check numerical answer
  EXPECT_TRUE(Q->mathsequals(expectedQ,1e-14,1e-14));
  EXPECT_TRUE(R->mathsequals(expectedR,1e-14,1e-14));

  OGExpr::Ptr mt = MTIMES::create(Q, R);
  runtree(mt);
  OGTerminal::Ptr reconstruct = mt->getRegs()[0]->asOGTerminal();

  // check Q is square
  EXPECT_TRUE(Q->getRows()==Q->getCols());

  // check Q*R == A
  EXPECT_TRUE(input->mathsequals(reconstruct, 1e-14, 1e-14));
}

class QRTest: public ::testing::TestWithParam<QRTestDataHolder> {};

TEST_P(QRTest, Exec)
{
  check_qr(GetParam());
}


QRTestDataHolder realSpaceTestData[] =
{
  // real scalar test
  QRTestDataHolder(
                  OGRealScalar::create(13),
                  OGRealScalar::create(1),
                  OGRealScalar::create(13)
                  ),
  // real condition ok 3 x 7 test
  QRTestDataHolder(
                  OGRealDenseMatrix::create(rcondok_3x7,3,7),
                  OGRealDenseMatrix::create({{-0.8944271909999157,0.4307055216465323,-0.1203858530857692},{-0.4472135954999579,-0.8614110432930647,0.2407717061715384},{-0.0,0.2691909510290827,0.9630868246861536}}),
                  OGRealDenseMatrix::create({{-11.1803398874989490,4.9193495504995370,-5.8137767414994528,-2.6832815729997472,-4.4721359549995778,-0.8944271909999162,-0.4472135954999579},{0.0,14.8593404968053679,0.3768673314407160,-4.6300843577002233,4.5762461674944070,-7.6450230092259499,4.2532170262595059},{0.0,0.0,3.0096463271442300,-4.9358199765165374,-0.2407717061715384,4.2135048580019223,1.9261736493723074}})
                  ),
  // real condition ok 7 x 3 test
  QRTestDataHolder(
                  OGRealDenseMatrix::create(rcondok_3x7,7,3),
                  OGRealDenseMatrix::create({{-0.5031546054266276,0.1398159799876106,-0.1459089998730565,0.0134209386877382,0.7138410586010642,0.0181757166863275,-0.4426262117375263},{-0.2515773027133138,-0.1452633558312837,0.2415974561750633,-0.3759667912490463,0.2279623315847968,-0.6510420782441416,0.4899637200790834},{-0.0,-0.1434475638833927,-0.8591484879887687,-0.4664239302637198,-0.1384130440943281,-0.0676179731105129,-0.0022423685791685},{-0.1006309210853255,-0.4597585212060128,-0.3229849121940692,0.7558336896401940,0.0576527972475418,-0.2585297621513595,0.1809149442455065},{0.7547319081399414,0.0054473758436732,-0.0956884563020067,-0.0159421284320569,0.6223894460808841,0.0342295051465793,0.1799982199578823},{-0.2012618421706510,-0.6326219146452405,0.1413934617279343,-0.2061836757582671,0.1570597239664872,0.6378020088963691,0.2555781786134992},{-0.2515773027133138,0.5719744635856796,-0.2207656298396900,0.1639119933279353,0.0628149913835204,0.3105494580546730,0.6584548426806145}}),
                  OGRealDenseMatrix::create({{-19.8746069143517872,-7.8995273051980526,1.4088328951945572},{0.0,-6.9711884463433051,2.1331923803824009},{0.0,0.0,-9.6677132840034190},{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}})
                  ),
  // real condition ok 3 x 3 test
  QRTestDataHolder(
                  OGRealDenseMatrix::create(rcondok_3x7,3,3),
                  OGRealDenseMatrix::create({{-0.8944271909999157,0.4307055216465323,-0.1203858530857692},{-0.4472135954999579,-0.8614110432930647,0.2407717061715384},{-0.0,0.2691909510290827,0.9630868246861536}}),
                  OGRealDenseMatrix::create({{-11.1803398874989490,4.9193495504995370,-5.8137767414994528},{0.0,14.8593404968053679,0.3768673314407160},{0.0,0.0,3.0096463271442300}})
                  ),
  // real condition ok 1 x 4 (horizontal vector) test
  QRTestDataHolder(
                  OGRealDenseMatrix::create(rcondok_3x7,1,4),
                  OGRealDenseMatrix::create({{1}}),
                  OGRealDenseMatrix::create({{10,5,0,2}})
                  ),
  // real condition ok 4 x 1 (vertical vector) test
  QRTestDataHolder(
                  OGRealDenseMatrix::create(rcondok_3x7,4,1),
                  OGRealDenseMatrix::create({{-0.8804509063256238,-0.4402254531628119,0.0,-0.1760901812651248},{-0.4402254531628119,0.8969404364876068,0.0,-0.0412238254049573},{-0.0,0.0,1.0,0.0},{-0.1760901812651248,-0.0412238254049573,0.0,0.9835104698380170}}),
                  OGRealDenseMatrix::create({{-11.3578166916005472},{0.0},{0.0},{0.0}})
                  )
};

QRTestDataHolder complexSpaceTestData[] =
{
  // complex scalar test
  QRTestDataHolder(
                  OGComplexScalar::create({5,10}),
                  OGComplexScalar::create({-0.4472135954999579,-0.8944271909999159}),
                  OGComplexScalar::create({-11.1803398874989490,0})
                  ),
  // complex condition ok 3 x 7 test
  QRTestDataHolder(
                  OGComplexDenseMatrix::create(ccondok_3x7,3,7),
                  OGComplexDenseMatrix::create({{{-0.3999999999999999,0.8000000000000000},{0.1926173649372306,-0.3852347298744613},{0.0538381902058166,-0.1076763804116330}},{{-0.1999999999999999,0.4000000000000000},{-0.3852347298744613,0.7704694597489228},{-0.1076763804116331,0.2153527608232662}},{{-0.0,0.0},{0.1203858530857692,-0.2407717061715383},{-0.4307055216465324,0.8614110432930648}}}),
                  OGComplexDenseMatrix::create({{{-25.0,0.0},{10.9999999999999964,0.0000000000000027},{-13.0,-0.0000000000000018},{-5.9999999999999991,-0.0000000000000009},{-10.0,0.0},{-1.9999999999999989,-0.0000000000000009},{-1.0000000000000009,0.0000000000000009}},{{0.0,0.0},{33.2264954516723066,0.0},{0.8427009716003837,-0.0000000000000002},{-10.3531833653761467,-0.0000000000000009},{10.2327975122903787,0.0},{-17.0947911381792252,-0.0000000000000036},{9.5104823937757654,0.0000000000000018}},{{0.0,0.0},{0.0,0.0},{-6.7297737757270690,0.0},{11.0368289921923939,0.0},{0.5383819020581646,-0.0000000000000003},{-9.4216832860178954,0.0},{-4.3070552164653249,0.0}}})
                  ),
  // complex condition ok 7 x 3 test
  QRTestDataHolder(
                  OGComplexDenseMatrix::create(ccondok_3x7,7,3),
                  OGComplexDenseMatrix::create({{{-0.2250175801852048,0.4500351603704096},{0.0625276071186094,-0.1250552142372190},{-0.0652524884490326,0.1305049768980650},{-0.0437465792890635,0.0611284181093784},{0.6804355227438846,0.2729632760766774},{-0.0691012292591547,0.0487720192100264},{-0.3411279050870793,-0.1983019509832651}},{{-0.1125087900926024,0.2250175801852048},{-0.0649637476556981,0.1299274953113963},{0.1080456670396936,-0.2160913340793872},{-0.2561733394912730,-0.3186169357328569},{0.1601832118512878,0.0381571089557458},{-0.4488938444019560,-0.4465206284636918},{0.3371092225560617,0.3852959204808357}},{{-0.0,0.0},{-0.0641517008100020,0.1283034016200039},{-0.3842228843818097,0.7684457687636191},{-0.4235273531487167,-0.1073843363818970},{-0.1466690974993143,-0.0413535923928642},{0.0002187798192878,-0.1059513619172705},{-0.0612416973869659,0.1103704182132401}},{{-0.0450035160370410,0.0900070320740819},{-0.2056102613302848,0.4112205226605694},{-0.1444432438745480,0.2888864877490958},{0.7366183194158220,0.0646471706981087},{0.0579581394877393,0.0116716716401113},{-0.2852630937618560,0.0198314373718210},{0.2051153170177166,-0.0073807532716559}},{{0.3375263702778071,-0.6750527405556144},{0.0024361405370887,-0.0048722810741774},{-0.0427931785906610,0.0855863571813220},{-0.0163749400668485,-0.0464848784503809},{0.5835281189271109,0.1664058088146946},{0.0399303204582087,-0.1019231448168955},{0.1964104351582740,0.0030056462618823}},{{-0.0900070320740819,0.1800140641481638},{-0.2829171210405655,0.5658342420811312},{0.0632330783995351,-0.1264661567990703},{-0.2265325142591582,0.0532164641480316},{0.1719529916605084,-0.0157012109235270},{0.6021560187578928,0.0893265437602708},{0.2810477132145344,-0.0759527622221089}},{{-0.1125087900926024,0.2250175801852048},{0.2557947563943116,-0.5115895127886232},{-0.0987293910834205,0.1974587821668412},{0.1811203615098522,-0.0115265754347115},{0.0687844503187729,-0.0769739345822397},{0.3392676867933194,-0.0361866543639925},{0.6274935957142045,0.0840394313576909}}}),
                  OGComplexDenseMatrix::create({{{-44.4409720865779434,0.0},{-17.6638800445385762,-0.0000000000000009},{3.1502461225928662,-0.0000000000000002}},{{0.0,0.0},{-15.5880512499847725,0.0},{4.7699631716196382,-0.0000000000000018}},{{0.0,0.0},{0.0,0.0},{-21.6176640900093808,0.0}},{{0.0,0.0},{0.0,0.0},{0.0,0.0}},{{0.0,0.0},{0.0,0.0},{0.0,0.0}},{{0.0,0.0},{0.0,0.0},{0.0,0.0}},{{0.0,0.0},{0.0,0.0},{0.0,0.0}}})
                  ),
  // complex condition ok 3 x 3 test
  QRTestDataHolder(
                  OGComplexDenseMatrix::create(ccondok_3x7,3,3),
                  OGComplexDenseMatrix::create({{{-0.3999999999999999,0.8000000000000000},{0.1926173649372306,-0.3852347298744613},{0.0538381902058166,-0.1076763804116330}},{{-0.1999999999999999,0.4000000000000000},{-0.3852347298744613,0.7704694597489228},{-0.1076763804116331,0.2153527608232662}},{{-0.0,0.0},{0.1203858530857692,-0.2407717061715383},{-0.4307055216465324,0.8614110432930648}}}),
                  OGComplexDenseMatrix::create({{{-25.0,0.0},{10.9999999999999964,0.0000000000000027},{-13.0,-0.0000000000000018}},{{0.0,0.0},{33.2264954516723066,0.0},{0.8427009716003837,-0.0000000000000002}},{{0.0,0.0},{0.0,0.0},{-6.7297737757270690,0.0}}})
                  ),
  // complex condition ok 1 x 4 (horizontal vector) test
  QRTestDataHolder(
                  OGComplexDenseMatrix::create(ccondok_3x7,1,4),
                  OGComplexDenseMatrix::create({{{-0.4472135954999579,0.8944271909999159}}}),
                  OGRealDenseMatrix::create({{-22.3606797749978981,-11.1803398874989490,0.0,-4.4721359549995796}})
                  ),
  // complex condition ok 4 x 1 (vertical vector) test
  QRTestDataHolder(
                  OGComplexDenseMatrix::create(ccondok_3x7,4,1),
                  OGComplexDenseMatrix::create({{{-0.3937496154790787,0.7874992309581578},{-0.4388683011635278,-0.0345407563067487},{0.0,0.0},{-0.1755473204654111,-0.0138163025226995}},{{-0.1968748077395395,0.3937496154790789},{0.8946005192474616,0.0595530281150840},{0.0,0.0},{-0.0421597923010154,0.0238212112460336}},{{-0.0,0.0},{0.0,0.0},{1.0,0.0},{0.0,0.0}},{{-0.0787499230958158,0.1574998461916316},{-0.0421597923010154,0.0238212112460336},{0.0,0.0},{0.9831360830795939,0.0095284844984134}}}),
                  OGRealDenseMatrix::create({{-25.3968501984005890},{0.0},{0.0},{0.0}})
                  )
};

// Instantiate test combinations
INSTANTIATE_TEST_CASE_P(QRRealSpaceTests, QRTest, ::testing::ValuesIn(realSpaceTestData));
INSTANTIATE_TEST_CASE_P(QRComplexSpaceTests, QRTest, ::testing::ValuesIn(complexSpaceTestData));
