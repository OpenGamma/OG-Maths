/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */

#include <iostream>
#include "numeric.hh"
#include "expression.hh"
#include "terminal.hh"

using namespace std;

namespace librdag
{

/*
 * Non-autogenerated OGNumeric methods
 */

OGNumeric::~OGNumeric()
{
}

COPY::Ptr
OGNumeric::asCOPY() const
{
  return COPY::Ptr{};
}

SELECTRESULT::Ptr
OGNumeric::asSELECTRESULT() const
{
  return SELECTRESULT::Ptr{};
}

NORM2::Ptr
OGNumeric::asNORM2() const
{
  return NORM2::Ptr{};
}

PINV::Ptr
OGNumeric::asPINV() const
{
  return PINV::Ptr{};
}

INV::Ptr
OGNumeric::asINV() const
{
  return INV::Ptr{};
}

TRANSPOSE::Ptr
OGNumeric::asTRANSPOSE() const
{
  return TRANSPOSE::Ptr{};
}

CTRANSPOSE::Ptr
OGNumeric::asCTRANSPOSE() const
{
  return CTRANSPOSE::Ptr{};
}

SVD::Ptr
OGNumeric::asSVD() const
{
  return SVD::Ptr{};
}

MTIMES::Ptr
OGNumeric::asMTIMES() const
{
  return MTIMES::Ptr{};
}

LU::Ptr
OGNumeric::asLU() const
{
  return LU::Ptr{};
}

OGExpr::Ptr
OGNumeric::asOGExpr() const
{
  return OGExpr::Ptr{};
}

OGTerminal::Ptr
OGNumeric::asOGTerminal() const
{
  return OGTerminal::Ptr{};
}

OGRealScalar::Ptr
OGNumeric::asOGRealScalar() const
{
  return OGRealScalar::Ptr{};
}

OGComplexScalar::Ptr
OGNumeric::asOGComplexScalar() const
{
  return OGComplexScalar::Ptr{};
}

OGIntegerScalar::Ptr
OGNumeric::asOGIntegerScalar() const
{
  return OGIntegerScalar::Ptr{};
}

OGRealDenseMatrix::Ptr
OGNumeric::asOGRealDenseMatrix() const
{
  return OGRealDenseMatrix::Ptr{};
}

OGComplexMatrix::Ptr
OGNumeric::asOGComplexMatrix() const
{
  return OGComplexMatrix::Ptr{};
}

OGLogicalMatrix::Ptr
OGNumeric::asOGLogicalMatrix() const
{
  return OGLogicalMatrix::Ptr{};
}

OGRealDiagonalMatrix::Ptr
OGNumeric::asOGRealDiagonalMatrix() const
{
  return OGRealDiagonalMatrix::Ptr{};
}

OGComplexDiagonalMatrix::Ptr
OGNumeric::asOGComplexDiagonalMatrix() const
{
  return OGComplexDiagonalMatrix::Ptr{};
}

OGRealSparseMatrix::Ptr
OGNumeric::asOGRealSparseMatrix() const
{
  return OGRealSparseMatrix::Ptr{};
}

OGComplexSparseMatrix::Ptr
OGNumeric::asOGComplexSparseMatrix() const
{
  return OGComplexSparseMatrix::Ptr{};
}

ExprType_t OGNumeric::getType() const
{
  return UNKNOWN_EXPR_ENUM;
}


} // namespace librdag
