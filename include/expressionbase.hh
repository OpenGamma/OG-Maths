/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */

#ifndef _EXPRESSIONBASE_HH
#define _EXPRESSIONBASE_HH

#include "numeric.hh"
#include "visitor.hh"
#include "containers.hh"

using namespace std;


/**
 * The namespace for the DAG library
 */
namespace librdag
{

/**
 * Container for expression arguments
 */

typedef PtrVector<const OGNumeric*> ArgContainer;
typedef PtrVector<const OGNumeric*>  RegContainer;

/**
 *  Expr type
 */
class OGExpr: public OGNumeric
{
  public:
    virtual ~OGExpr();
    const ArgContainer& getArgs() const;
    RegContainer& getRegs() const;
    size_t getNArgs() const;
    virtual const OGExpr* asOGExpr() const override;
    virtual void debug_print() const override;
    virtual void accept(Visitor &v) const override;
  protected:
    OGExpr();
    ArgContainer _args;
  private:
    mutable RegContainer _regs;
};

/**
 * Things that extend OGExpr
 */

class OGUnaryExpr: public OGExpr
{
  protected:
    OGUnaryExpr(const OGNumeric* arg);
};

class OGBinaryExpr : public OGExpr
{
  protected:
    OGBinaryExpr(const OGNumeric* arg0, const OGNumeric* arg1);
};

/**
 * Non-autogenerated nodes
 */

class COPY: public OGUnaryExpr
{
  public:
    COPY(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const COPY* asCOPY() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

class SELECTRESULT: public OGExpr
{
  public:
    SELECTRESULT(const OGNumeric* arg0, const OGNumeric* arg1);
    virtual OGNumeric* copy() const override;
    virtual const SELECTRESULT* asSELECTRESULT() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

class NORM2: public OGUnaryExpr
{
  public:
    NORM2(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const NORM2* asNORM2() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};


class PINV: public OGUnaryExpr
{
  public:
    PINV(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const PINV* asPINV() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

class TRANSPOSE: public OGUnaryExpr
{
  public:
    TRANSPOSE(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const TRANSPOSE* asTRANSPOSE() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

class CTRANSPOSE: public OGUnaryExpr
{
  public:
    CTRANSPOSE(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const CTRANSPOSE* asCTRANSPOSE() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};


class SVD: public OGUnaryExpr
{
  public:
    SVD(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const SVD* asSVD() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

class MTIMES: public OGBinaryExpr
{
  public:
    MTIMES(const OGNumeric* arg0, const OGNumeric* arg1);
    virtual OGNumeric* copy() const override;
    virtual const MTIMES* asMTIMES() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

class LU: public OGUnaryExpr
{
  public:
    LU(const OGNumeric* arg);
    virtual OGNumeric* copy() const override;
    virtual const LU* asLU() const override;
    virtual void debug_print() const override;
    virtual ExprType_t getType() const override;
};

} // namespace librdag

#endif // _EXPRESSIONBASE_HH
